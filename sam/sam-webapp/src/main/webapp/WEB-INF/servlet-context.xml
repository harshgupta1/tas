<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<util:properties id="jdbcConfiguration" location="classpath:jdbc.properties" />
	<context:property-placeholder properties-ref="jdbcConfiguration"  />
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- Scans within the base package of the application for @Components to configure as beans -->
	<context:component-scan base-package="com.til.service" />
	<context:component-scan base-package="com.til.service.ui.admin" />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/*.html" location="/" />
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">   
        <beans:property name="basename" value="messages" />
    </beans:bean>
    
    <!--
        - This bean resolves default view names for controllers that do not explicitly
        - specify a view name in their return ModelAndView (see ClinicController).
        - This translator takes the request URL and extracts a view name from it: e.g.
        - "/welcome.html" -> "welcome", plus configured "View" suffix -> "welcomeView".
        -->
    <beans:bean id="viewNameTranslator" class="org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator">
        <beans:property name="suffix" value="View" />
    </beans:bean>
    
    <!--
      - This bean provides explicit View mappings in a resource bundle instead of the
      - default InternalResourceViewResolver. It fetches the view mappings from
      - localized "views_xx" classpath files, i.e. "/WEB-INF/classes/views.properties"
      - or "/WEB-INF/classes/views_de.properties".
      -
      - Symbolic view names returned by Controllers will be resolved by this bean
      - using the respective properties file, which defines arbitrary mappings between
      - view names and resources.
      -->
    <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
        <beans:property name="basename" value="views" />
    </beans:bean>
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <!-- one of the properties available; the maximum file size in bytes -->
	    <beans:property name="maxUploadSize" value="#{jdbcConfiguration['mailattachment.maxsize']}"/>
	</beans:bean>
</beans:beans>
